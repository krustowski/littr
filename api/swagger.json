{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "A simple nanoblogging platform.",
        "title": "littr",
        "termsOfService": "https://www.littr.eu/tos",
        "contact": {
            "name": "API Support",
            "url": "https://www.littr.eu/docs",
            "email": "info@littr.eu"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/krustowski/littr/blob/master/LICENSE"
        },
        "version": "0.45.20"
    },
    "host": "www.littr.eu",
    "basePath": "/api/v1",
    "paths": {
        "/auth": {
            "post": {
                "description": "auth an user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Auth an user",
                "parameters": [
                    {
                        "description": "user struct to auth",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.AuthUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/auth.Auth.responseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/auth.Auth.responseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/auth.Auth.responseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/auth.Auth.responseData"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "log-out an user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Log-out an user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/auth.Logout.responseData"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/dump": {
            "get": {
                "description": "perform system data dump",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dump"
                ],
                "summary": "Perform system data dump",
                "parameters": [
                    {
                        "type": "string",
                        "description": "dump token",
                        "name": "X-Dump-Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    }
                }
            }
        },
        "/live": {
            "get": {
                "description": "get real-time posts event stream",
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "live"
                ],
                "summary": "Get real-time posts event stream (SSE stream)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/polls": {
            "get": {
                "description": "get a list of polls",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "polls"
                ],
                "summary": "Get a list of polls",
                "parameters": [
                    {
                        "type": "string",
                        "description": "page number",
                        "name": "X-Page-No",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/polls.GetAll.responseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "post": {
                "description": "add new poll",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "polls"
                ],
                "summary": "Add new poll",
                "parameters": [
                    {
                        "description": "new poll's body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Poll"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "bad/malformed input data, invalid cookies",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "the poll saving process failed",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/polls/{pollID}": {
            "get": {
                "description": "get single poll",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "polls"
                ],
                "summary": "Get single poll",
                "parameters": [
                    {
                        "type": "string",
                        "description": "poll ID",
                        "name": "pollID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/polls.GetByID.responseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "put": {
                "description": "update a poll",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "polls"
                ],
                "summary": "Update a poll",
                "parameters": [
                    {
                        "description": "update poll's body",
                        "name": "updatedPoll",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Poll"
                        }
                    },
                    {
                        "type": "string",
                        "description": "poll's ID",
                        "name": "pollID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "delete": {
                "description": "delete a poll by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "polls"
                ],
                "summary": "Delete a poll by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "poll's ID to delete",
                        "name": "pollID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/posts": {
            "get": {
                "description": "get posts",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get posts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "page number",
                        "name": "X-Page-No",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "hide replies bool",
                        "name": "X-Hide-Replies",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/posts.getPosts.responseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "add new post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Add new post",
                "parameters": [
                    {
                        "description": "new post struct in request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Post"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/posts.addNewPost.responseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    }
                }
            }
        },
        "/posts/hashtags/{hashtag}": {
            "get": {
                "description": "get hashtagged post list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get hashtagged post list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "hide replies",
                        "name": "X-Hide-Replies",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "page number",
                        "name": "X-Page-No",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "hashtag string",
                        "name": "hashtag",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/posts.fetchHashtaggedPosts.responseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    }
                }
            }
        },
        "/posts/{postID}": {
            "get": {
                "description": "get single post",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get single post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "hide replies",
                        "name": "X-Hide-Replies",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "page number",
                        "name": "X-Page-No",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "post's ID to update",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/posts.getSinglePost.responseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "update specified post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Update specified post",
                "deprecated": true,
                "parameters": [
                    {
                        "description": "post to update in request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Post"
                        }
                    },
                    {
                        "type": "string",
                        "description": "post's ID to update",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete specified post",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Delete specified post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "post's ID to update",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    }
                }
            }
        },
        "/posts/{postID}/star": {
            "patch": {
                "description": "update the star count",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Update post's star count",
                "parameters": [
                    {
                        "type": "string",
                        "description": "post's ID to update",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/posts.updatePostStarCount.responseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    }
                }
            }
        },
        "/push/notification/{postID}": {
            "post": {
                "description": "Send a notification",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "push"
                ],
                "summary": "Send a notification",
                "parameters": [
                    {
                        "type": "string",
                        "description": "original post's ID",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    }
                }
            }
        },
        "/push/subscription": {
            "post": {
                "description": "add the notification subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "push"
                ],
                "summary": "Add the notification subscription",
                "parameters": [
                    {
                        "description": "device to subscribe",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Device"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    }
                }
            }
        },
        "/push/subscription/{uuid}": {
            "delete": {
                "description": "delete a subscription",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "push"
                ],
                "summary": "Delete a subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID of a device to delete",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    }
                }
            }
        },
        "/push/subscription/{uuid}/mention": {
            "put": {
                "description": "Update the notification subscription tag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "push"
                ],
                "summary": "Update the notification subscription tag",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID of a device to update",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    }
                }
            }
        },
        "/push/subscription/{uuid}/reply": {
            "put": {
                "description": "Update the notification subscription tag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "push"
                ],
                "summary": "Update the notification subscription tag",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID of a device to update",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    }
                }
            }
        },
        "/push/vapid": {
            "get": {
                "description": "get a VAPID key pair",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "push"
                ],
                "summary": "Get a VAPID key pair",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/push.fetchVAPIDKey.responseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/auth.Auth.responseData"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/stats": {
            "get": {
                "description": "get stats",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Get stats",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/stats.GetAll.responseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/auth.Auth.responseData"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "This function call retrieves a paginated list of user accounts. The page number starts at 0 (and is the default value if not provided in a request).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a list of users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page number (default is 0)",
                        "name": "X-Page-No",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Requested page of user accounts returned.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/users.GetAll.responseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input data.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "A generic problem in the internal system's logic. See the `message` KV in JSON to gain more information.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "post": {
                "description": "This function call provides a method on how to create a new user in the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Add new user",
                "parameters": [
                    {
                        "description": "The request body containing all listed fields for a new user's creation.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.UserCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The request was processed successfully and an user was created.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "The request body contains invalid data, or data types.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "This response code may occur when the registration is disabled.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "409": {
                        "description": "The nickname and/or e-mail fields contain data, that had been already used by someone else.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "There is a problem processing the request in the internal server logic. This may occur when a new user cannot be saved to the database for example.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/users/activation/{uuid}": {
            "post": {
                "description": "This function call provides a method for the new user's activation using a received UUID string.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Activate an user via an UUID string",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The UUID string from the activation e-mail, that is sent to the new user after a successful registration.",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user was activated successfully.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "The request body contains invalid data, or data types.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "The UUID string does not match any user in the system.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "There is a problem processing the request (e.g. a problem accessing the database).",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/users/caller": {
            "get": {
                "description": "This function call retrieves an user's data that is to be specified in the URI path (as `userID` param below in the request section). A special keyword `called` can be used to retrieve all reasonable data for the user calling the API. The identity is assured using the refresh token, which is encoded into the refresh HTTP cookie.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get the user's details",
                "responses": {
                    "200": {
                        "description": "Requested user's data (may be limited according to the caller).",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/users.GetByID.responseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input data.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "User not found in the database.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "A generic problem in the internal system's logic. See the `message` KV in JSON to gain more information.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/users/passphrase/request": {
            "post": {
                "description": "This function call is to be called when an user forgets their passphrase and wants a new one.\n\nInternally, this is a mailing procedure as two mails has to be delivered and the content used with the API/client to successfully reset the passphrase.\nAs far as the payload (request body) is concerned,",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Reset the passphrase",
                "parameters": [
                    {
                        "description": "A common passphrase reset payload.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.UserPassphraseResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The passphrase was changed successfully.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid data received.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Such user does not exist in the system.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "There is an internal processing problem present (e.g. data could not be saved to the database).",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/users/passphrase/reset": {
            "post": {
                "description": "This function call is to be called when an user forgets their passphrase and wants a new one.\n\nInternally, this is a mailing procedure as two mails has to be delivered and the content used with the API/client to successfully reset the passphrase.\nAs far as the payload (request body) is concerned,",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Reset the passphrase",
                "parameters": [
                    {
                        "description": "A common passphrase reset payload.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.UserPassphraseResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The passphrase was changed successfully.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid data received.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Such user does not exist in the system.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "There is an internal processing problem present (e.g. data could not be saved to the database).",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/users/{userID}": {
            "get": {
                "description": "This function call retrieves an user's data that is to be specified in the URI path (as `userID` param below in the request section). A special keyword `called` can be used to retrieve all reasonable data for the user calling the API. The identity is assured using the refresh token, which is encoded into the refresh HTTP cookie.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get the user's details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user's ID to be shown",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Requested user's data (may be limited according to the caller).",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/users.GetByID.responseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input data.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "User not found in the database.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "A generic problem in the internal system's logic. See the `message` KV in JSON to gain more information.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "delete": {
                "description": "This function call ensures a caller's user account is deleted while all posted items (posts and polls) are purged too. Additionally, all associated requests and tokens are deleted as well.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user to be purged",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The submitted user account has been deleted.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input data.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "Blocked attemt to cross-delete other (foreign) user account. The userID param has to be equal to the caller's nickname.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Such user does not exist in the system.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "There is an internal processing problem present (e.g. data could not be saved to the database).",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/users/{userID}/avatar": {
            "post": {
                "description": "This function call presents a method to change one's avatar URL property while also uploading a new picture as a profile photo. Binary data and a figure's extension (JPG, JPEG, PNG) has to be encapsulated into the JSON object as base64 formatted text.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Post user's avatar",
                "parameters": [
                    {
                        "description": "The data object containing the new avatar's data.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.UserUploadAvatarRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "User's ID for avatar update.",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The avatar was uploaded and updated successfully.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid data received.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "Unauthorized attempt to modify a forigner's avatar.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Such user does not exist in the system.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "There is an internal processing problem present (e.g. data could not be saved to the database).",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/users/{userID}/lists": {
            "patch": {
                "description": "This function call enables the caller to modify lists saved with other user's data in the database.\n\nThose lists are KV structures, that hold another user's nickname as key, and a boolean as a value to specify whether such list should apply its logic on such user.\nAt least one list has to be specified.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user's list properties",
                "parameters": [
                    {
                        "description": "Lists object data as a desired state recipe.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.UserUpdateListsRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "ID of the user to update",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User's lists have been updated.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid data received.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "This code can occur when one wants to update another user (this feature to be prepared for a possible admin panel function).",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Such user does not exist.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "There is a processing problem in the internal logic, or some system's component does not behave (e.g. database is unavailable).",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/users/{userID}/options": {
            "patch": {
                "description": "This function call enables the caller to modify some of their properties (options) saved in the database.\n\nNote: the duality in the options' configuration (map vs. separated booleans) reflects the attempt for backward compatibility with older clients (v0.45.18 and older).\nThe preferred one is the map configuration.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user's option properties",
                "parameters": [
                    {
                        "description": "A JSON object containing at least one option with a desired value.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.UserUpdateOptionsRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "ID of the user to update",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User's options were updated successfully.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid data received.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "Unauthorized attempt to modify a foreign option set.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Such user does not exist in the system.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "There is an internal processing problem (e.g. data could not be saved in database).",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/users/{userID}/passphrase": {
            "patch": {
                "description": "This function call enables the caller to modify their current passphrase. The current and a new passphrase are to be sent (hashed using sha512 algorithm).\n\nThe problem there is on how to fetch the current passphrase. This can be achieved using a web browser in dev tools (F12), where the hash is to be found on the Network card.\nAnother problem is that the server uses a secret (pepper), that is appended to a passphrase before loading it into the has algorithm. This secret cannot be fetched via API, as it is a sensitive variable saved as the environmental variable where the server is run.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user's passphrase",
                "parameters": [
                    {
                        "description": "Hexadecimal representation of the sha512-hashed passphrases.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.UserUpdatePassphraseRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "ID of the user to update",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User has been updated.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid data received.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "Unauthorized attempt to modify a forigner's passphrase.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Such user does not exist in the system.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "There is an internal processing problem present (e.g. data could not be saved to the database).",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/users/{userID}/posts": {
            "get": {
                "description": "This function call is a very specific combination of the users' and posts' services. It retrieves a paginated list of posts made by such user. Special restrictions are applied, such as the privacy (private account, which is not followed by the caller is shown blank). If the list is empty, ensure you are following such user/account.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user posts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Optional boolean specifying the request of so-called root posts (those not being a reply). Default is false.",
                        "name": "X-Hide-Replies",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Page number (default is 0).",
                        "name": "X-Page-No",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "User's ID (usually the nickname).",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A paginated list of the user's posts (special restriction may apply).",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/users.GetPosts.responseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input data.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "A very internal service's logic problem. See the `message` field to gain more information.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Stub"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.Auth.responseData": {
            "type": "object",
            "properties": {
                "auth_granted": {
                    "type": "boolean"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "auth.AuthUser": {
            "type": "object",
            "properties": {
                "nickname": {
                    "description": "Nickname is the user's very username.",
                    "type": "string"
                },
                "passphrase": {
                    "description": "Passphrase is a legacy format converted to string from a raw byte stream\n(do not use anymore as this will be removed in future versions).",
                    "type": "string"
                },
                "passphrase_hex": {
                    "description": "PassphraseHex is a hexadecimal representation of a passphrase (a SHA-512 checksum).\nUse 'echo $PASS | sha512sum' for example to get the hex format.",
                    "type": "string"
                }
            }
        },
        "auth.Logout.responseData": {
            "type": "object",
            "properties": {
                "authGranted": {
                    "type": "boolean"
                }
            }
        },
        "common.APIResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data field for any payload"
                },
                "message": {
                    "description": "Common fields for all responses",
                    "type": "string",
                    "example": "a generic success info, or a processing problem/error description"
                },
                "timestamp": {
                    "type": "integer",
                    "example": 1734778064068087800
                }
            }
        },
        "models.Device": {
            "type": "object",
            "properties": {
                "subscription": {
                    "description": "The very subscription struct/details.\nSubscription app.NotificationSubscription `json:\"subscription\"`\nSubscription webpush.Subscription `json:\"subscription\"`",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Subscription"
                        }
                    ]
                },
                "tags": {
                    "description": "List of labels for such device.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "time_created": {
                    "description": "Timestamp of the subscription creation.",
                    "type": "string"
                },
                "time_last_used": {
                    "description": "Timestamp of the last notification sent through this device.",
                    "type": "string"
                },
                "uuid": {
                    "description": "Unique identification of the app on the current device.\nhttps://go-app.dev/reference#Context",
                    "type": "string"
                }
            }
        },
        "models.Keys": {
            "type": "object",
            "properties": {
                "auth": {
                    "type": "string"
                },
                "p256dh": {
                    "type": "string"
                }
            }
        },
        "models.Poll": {
            "type": "object",
            "properties": {
                "author": {
                    "description": "Author is the back key to the user originally posting that poll.",
                    "type": "string"
                },
                "hidden": {
                    "description": "Experimental fields.",
                    "type": "boolean"
                },
                "id": {
                    "description": "ID is an unique poll's identifier.",
                    "type": "string"
                },
                "option_one": {
                    "description": "OptionOne is the answer numero uno.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.PollOption"
                        }
                    ]
                },
                "option_three": {
                    "description": "OptionThree is the answer numero tres.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.PollOption"
                        }
                    ]
                },
                "option_two": {
                    "description": "OptionTwo is the answer numero dos.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.PollOption"
                        }
                    ]
                },
                "private": {
                    "type": "boolean"
                },
                "question": {
                    "description": "Question is to describe the main purpose of such poll.",
                    "type": "string"
                },
                "reaction_count": {
                    "description": "ReactionCount counts the number of item's reactions.",
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "timestamp": {
                    "description": "Timestamp is an UNIX timestamp indication the poll's creation time; should be identical to the upstream post's Timestamp.",
                    "type": "string"
                },
                "voted_list": {
                    "description": "VodeList is the list of user nicknames voted on such poll already.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.PollOption": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "Content describes the very content of such poll's option/answer.",
                    "type": "string"
                },
                "counter": {
                    "description": "Counter hold a number of votes being committed to such option.",
                    "type": "integer"
                }
            }
        },
        "models.Post": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "Content contains the very post's data to be shown as a text typed in by the author when created.",
                    "type": "string"
                },
                "data": {
                    "description": "Data is a helper field for the actual figure upload.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "figure": {
                    "description": "Figure hold the filename of the uploaded figure to post with some provided text.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is an unique post's identificator.",
                    "type": "string"
                },
                "nickname": {
                    "description": "Nickname is a name of the post's author's name.",
                    "type": "string"
                },
                "poll_id": {
                    "description": "PollID is an identification of the Poll structure/object.",
                    "type": "string"
                },
                "reaction_count": {
                    "description": "ReactionCount counts the number of item's reactions.",
                    "type": "integer"
                },
                "reply_count": {
                    "description": "ReplyCount hold the count of replies for such post.",
                    "type": "integer"
                },
                "reply_to": {
                    "description": "ReplyTo is a reference key to another post, that is being replied to.",
                    "type": "integer"
                },
                "reply_to_id": {
                    "type": "string"
                },
                "timestamp": {
                    "description": "Timestamp is an UNIX timestamp, indicates the creation time.",
                    "type": "string"
                },
                "type": {
                    "description": "Type describes the post's type --- post, poll, reply, img.",
                    "type": "string"
                }
            }
        },
        "models.Stub": {
            "type": "object"
        },
        "models.Subscription": {
            "type": "object",
            "properties": {
                "endpoint": {
                    "type": "string"
                },
                "keys": {
                    "$ref": "#/definitions/models.Keys"
                }
            }
        },
        "models.User": {
            "type": "object",
            "required": [
                "nickname"
            ],
            "properties": {
                "about": {
                    "description": "About is a description string of such user.",
                    "type": "string",
                    "default": "newbie"
                },
                "active": {
                    "description": "Active boolean indicates an activated user's account.",
                    "type": "boolean"
                },
                "app_bg_mode": {
                    "description": "AppBgMode string defines the colour mode of the app's background (light vs dark).",
                    "type": "string",
                    "default": "dark"
                },
                "avatar_url": {
                    "description": "AvatarURL is an URL to the user's custom profile picture.",
                    "type": "string"
                },
                "color": {
                    "description": "Color is the user's UI color scheme.",
                    "type": "string",
                    "default": "#000000"
                },
                "devices": {
                    "description": "Devices array holds the subscribed devices. Devices are not exported as the subscribed devices are stored separated.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Device"
                    }
                },
                "email": {
                    "description": "Email is a primary user's e-mail address.",
                    "type": "string"
                },
                "flow_list": {
                    "description": "FlowList is a string map of users, which posts should be added to one's flow page.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserGenericMap"
                        }
                    ]
                },
                "full_name": {
                    "description": "FullName is the \"genuine\" name of such user.",
                    "type": "string"
                },
                "gdpr": {
                    "description": "GDPR consent, set to true because it is noted on the registration page so. No user data should\nbe saved if the boolean is false.",
                    "type": "boolean"
                },
                "last_active_time": {
                    "description": "LastLoginTime is an UNIX timestamp of the last action performed by such user.",
                    "type": "string"
                },
                "last_login_time": {
                    "description": "LastLoginTime is an UNIX timestamp of the last user's successful log-in.",
                    "type": "string"
                },
                "live_mode": {
                    "description": "LiveMode is a feature allowing to show notifications about new posts",
                    "type": "boolean"
                },
                "local_time_mode": {
                    "description": "LocalTimeMode is a feature to show any post's datetime in the local time according to the client's/user's device setting.",
                    "type": "boolean"
                },
                "nickname": {
                    "description": "Nickname is a login name of such user.",
                    "type": "string",
                    "example": "alice"
                },
                "options": {
                    "description": "Options is an umbrella struct/map for the booleans.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserOptionsMap"
                        }
                    ]
                },
                "private": {
                    "description": "Private boolean indicates a private user's account.",
                    "type": "boolean"
                },
                "registered_time": {
                    "description": "RegisteredTime is an UNIX timestamp of the user's registration.",
                    "type": "string"
                },
                "request_list": {
                    "description": "RequestList is a map of account requested to add this user to their flow --- used with the Private property.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserGenericMap"
                        }
                    ]
                },
                "shade_list": {
                    "description": "ShadeList is a map of account/users to be shaded (soft-blocked) from following.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserGenericMap"
                        }
                    ]
                },
                "tags": {
                    "description": "Tags is an array of possible roles and other various attributes assigned to such user.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "web": {
                    "description": "Web is user's personal homepage.",
                    "type": "string"
                }
            }
        },
        "models.UserGenericMap": {
            "type": "object",
            "additionalProperties": {
                "type": "boolean"
            }
        },
        "models.UserOptionsMap": {
            "type": "object",
            "additionalProperties": {
                "type": "boolean"
            }
        },
        "models.UserStat": {
            "type": "object",
            "properties": {
                "flowerCount": {
                    "description": "FlowerCount is basically a number of followers.",
                    "type": "integer"
                },
                "postCount": {
                    "description": "PostCount is a number of posts of such user.",
                    "type": "integer"
                },
                "reactionCount": {
                    "description": "ReactionCount tells the number of interactions (stars given).",
                    "type": "integer"
                },
                "searched": {
                    "description": "Searched is a special boolean used by the search engine to mark who is to be shown in search results.",
                    "type": "boolean"
                },
                "shadeCount": {
                    "description": "ShadeCount is basically a number of blockers.",
                    "type": "integer"
                }
            }
        },
        "polls.GetAll.responseData": {
            "type": "object",
            "properties": {
                "polls": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.Poll"
                    }
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "polls.GetByID.responseData": {
            "type": "object",
            "properties": {
                "poll": {
                    "$ref": "#/definitions/models.Poll"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "posts.addNewPost.responseData": {
            "type": "object",
            "properties": {
                "posts": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.Post"
                    }
                }
            }
        },
        "posts.fetchHashtaggedPosts.responseData": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "posts": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.Post"
                    }
                },
                "users": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        },
        "posts.getPosts.responseData": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "key": {
                    "type": "string"
                },
                "posts": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.Post"
                    }
                },
                "users": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        },
        "posts.getSinglePost.responseData": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "posts": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.Post"
                    }
                },
                "users": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        },
        "posts.updatePostStarCount.responseData": {
            "type": "object",
            "properties": {
                "posts": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.Post"
                    }
                }
            }
        },
        "push.fetchVAPIDKey.responseData": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                }
            }
        },
        "stats.GetAll.responseData": {
            "type": "object",
            "properties": {
                "flow_stats": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "user_stats": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.UserStat"
                    }
                },
                "users": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        },
        "users.GetAll.responseData": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "user_stats": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.UserStat"
                    }
                },
                "users": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        },
        "users.GetByID.responseData": {
            "type": "object",
            "properties": {
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Device"
                    }
                },
                "public_key": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "users.GetPosts.responseData": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "posts": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.Post"
                    }
                },
                "users": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        },
        "users.UserCreateRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "alice@example.com"
                },
                "nickname": {
                    "type": "string",
                    "example": "alice"
                },
                "passphrase_hex": {
                    "type": "string",
                    "example": "fb43b35a752b0e8045e2dd1b1e292983b9cbf4672a51e30caaa3f9b06c5a3b74d5096bc8092c9e90a2e047c1eab29eceb50c09d6c51e6995c1674beb3b06535e"
                }
            }
        },
        "users.UserPassphraseResetRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "alice@example.com"
                },
                "uuid": {
                    "description": "Passphrase reset request",
                    "type": "string"
                }
            }
        },
        "users.UserUpdateListsRequest": {
            "type": "object",
            "properties": {
                "flow_list": {
                    "description": "Lists update request payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "example": {
                        "bob": false
                    }
                },
                "request_list": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "example": {
                        "cody": true
                    }
                },
                "shade_list": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "example": {
                        "dave": true
                    }
                }
            }
        },
        "users.UserUpdateOptionsRequest": {
            "type": "object",
            "properties": {
                "about_you": {
                    "type": "string",
                    "example": "let's gooo"
                },
                "dark_mode": {
                    "description": "Options updata request payload (legacy fields).",
                    "type": "boolean"
                },
                "live_mode": {
                    "type": "boolean"
                },
                "local_time_mode": {
                    "type": "boolean"
                },
                "options_map": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserOptionsMap"
                        }
                    ],
                    "example": {
                        "private": true
                    }
                },
                "private": {
                    "type": "boolean"
                },
                "website_link": {
                    "type": "string",
                    "example": "https://example.com"
                }
            }
        },
        "users.UserUpdatePassphraseRequest": {
            "type": "object",
            "properties": {
                "current_passphrase_hex": {
                    "type": "string"
                },
                "new_passphrase_hex": {
                    "description": "New passphrase request payload.",
                    "type": "string"
                }
            }
        },
        "users.UserUploadAvatarRequest": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "New avatar upload/update request payload.",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "base64"
                    }
                },
                "figure": {
                    "type": "string",
                    "example": "avatar.jpeg"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "security": [
        {
            "": [
                ""
            ]
        }
    ],
    "externalDocs": {
        "description": "Documentation",
        "url": "https://krusty.space/projects/littr/"
    }
}